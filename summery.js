// ============================================================================
// AI SUMMARIZATION MODULE - Google Gemini Integration
// ============================================================================
// This module handles AI-powered text summarization using Google's Gemini AI model
// Primary functions include summarizing medical interactions and converting them
// to structured flashcard format for easy review and study

import { GoogleGenerativeAI } from "@google/generative-ai";    // Google's Generative AI SDK
import { saveFlashcard } from "./lib/firebase.ts";             // Firebase storage function for flashcards

// ============================================================================
// API CONFIGURATION - Gemini AI Setup
// ============================================================================
// Use environment variables for API key management (currently hardcoded for demo)
const GEMINI_API_KEY = "AIzaSyAXBibfzvW9ZixCsIzlekXQ75QofPfwhO8";

// Configure Gemini AI instance using the API key
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// ============================================================================
// TEXT SUMMARIZATION FUNCTION - AI-Powered Content Processing
// ============================================================================
// Takes raw text input and returns a structured summary object suitable for flashcard creation
// Always returns an object with consistent structure, even on API failures
export async function summarizeText(text) {
  console.log(">>> Starting text summarization process...");

  try {
    // Log the input text for debugging purposes
    console.log(">>> Text to summarize:", text);

    // ============================================================================
    // AI MODEL INITIALIZATION - Load Gemini Model
    // ============================================================================
    // Retrieve the generative model (gemini-1.5-flash is optimized for speed)
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    console.log(">>> Model successfully loaded:", model);

    // ============================================================================
    // AI CONTENT GENERATION - Send Request to Gemini
    // ============================================================================
    // Generate summary content using the AI model with structured prompt
    console.log(">>> Sending text to Generative AI model...");
    const response = await model.generateContent({
      contents: [
        { 
          role: "user", 
          parts: [{ 
            text: `Provide a concise summary of the following medical interaction:\n\n${text}` 
          }] 
        },
      ],
    });

    console.log(">>> Full API response:", JSON.stringify(response, null, 2));

    // ============================================================================
    // RESPONSE PROCESSING - Extract Summary from API Response
    // ============================================================================
    // Safely extract the summary text from the nested API response structure
    const summary = response?.response?.candidates?.[0]?.content?.parts?.[0]?.text;

    // Handle case where AI model fails to generate summary
    if (!summary || summary.trim() === "") {
      console.warn(">>> Warning: No summary generated by the AI model.");
      return {
        id: new Date().getTime().toString(),          // Unique timestamp ID
        title: "Summary Unavailable",                 // Fallback title
        content: "The AI model could not generate a summary.", // Error message
        category: "Summary",                          // Default category
        date: new Date().toISOString(),               // Current timestamp
      };
    }

    console.log(">>> Extracted summary:", summary);

    // ============================================================================
    // STRUCTURED DATA CREATION - Format Summary for Flashcard System
    // ============================================================================
    // Convert AI summary into structured object compatible with flashcard storage
    const formattedSummary = {
      id: new Date().getTime().toString(),            // Unique ID using timestamp
      title: `Summary of ${text.split(" ")[0]}`, // Use the first word of the text for the title
      content: summary, // This will be either the extracted summary or the fallback string
      category: "Summary",
      date: new Date().toISOString(),
    };

    console.log(">>> Formatted summary object:", formattedSummary);

    // Save the summary to Firebase using the `saveFlashcard` function
    console.log(">>> Saving formatted summary to Firebase...");
    await saveFlashcard(
      formattedSummary.title,
      formattedSummary.content,
      formattedSummary.category
    );
    console.log(">>> Summary successfully saved to Firebase.");

    // Return the summary object (useful for display in the UI or further processing)
    return formattedSummary;
  } catch (error) {
    // Log the error details for debugging
    console.error(">>> An error occurred during summarization:", error.message);
    console.error(">>> Full error details:", error.stack);
    throw error;
  } finally {
    console.log(">>> Summarization process complete.");
  }
}

// Example text to summarize
(async () => {
  try {
    const result = await summarizeText(
      "Students are the backbone of the future, constantly learning, growing, and adapting to new challenges. Whether in elementary school, high school, or university, they develop critical thinking skills, discipline, and resilience through their studies. Balancing academics, extracurricular activities, and social life can be demanding, but it also shapes them into well-rounded individuals. With the rise of digital learning tools and online education, students now have more resources than ever to enhance their knowledge and skills. Success in education requires dedication, curiosity, and a willingness to learn from both successes and failures.MediLog is an innovative app for managing medical records and integrating flashcards for education."
    );
    console.log(">>> Summary result:", result);
  } catch (err) {
    console.error(">>> Failed to summarize text:", err.message);
  }
})();
